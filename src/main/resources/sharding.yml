
  dataSources:
    #Первый шард база данных transaction_db_0
    ds_0: !!com.zaxxer.hikari.HikariDataSource
      driverClassName: org.postgresql.Driver
      jdbcUrl: jdbc:postgresql://localhost:5432/transaction_db_0
      username: postgres
      password: admin
    # Второй шард -база данных transaction_db_1
    ds_1: !!com.zaxxer.hikari.HikariDataSource
      driverClassName: org.postgresql.Driver
      jdbcUrl: jdbc:postgresql://localhost:5432/transaction_db_1
      username: postgres
      password: admin

  #Правила
  rules:
    - !SHARDING

      tables:
        # Таблица транзакций
        transactions:
          # таблица существует в обеих базах данных
          actualDataNodes: ds_${0..1}.transactions
          # Стратегия шардирования для таблицы
          tableStrategy:
            standard:
              #Колонкапо которой происходит шардирование
              shardingColumn: uid
              #Алгоритм шардирования
              shardingAlgorithmName: transactions_inline

        # Таблица кошельков
        wallets:
          actualDataNodes: ds_${0..1}.wallets
          tableStrategy:
            standard:
              shardingColumn: uid
              shardingAlgorithmName: wallets_inline

        #Таблица платежных запросов
        payment_requests:
          actualDataNodes: ds_${0..1}.payment_requests
          tableStrategy:
            standard:
              shardingColumn: uid
              shardingAlgorithmName: payment_requests_inline

        #Таблица типов кошельков
        wallet_types:
          actualDataNodes: ds_${0..1}.wallet_types
          tableStrategy:
            standard:
              shardingColumn: uid
              shardingAlgorithmName: wallet_types_inline

      #Алгоритмы шардирования для каждой таблицы
      shardingAlgorithms:
        #Алгоритм для транзакций
        transactions_inline:
          type: INLINE
          props:
            # хеш-код UUID по модулю 2 для определения шарда
            algorithm-expression: ds_${Math.abs(uid.hashCode() % 2)}

        #  для кошельков
        wallets_inline:
          type: INLINE
          props:
            algorithm-expression: ds_${Math.abs(uid.hashCode() % 2)}

        # для платежных запросов
        payment_requests_inline:
          type: INLINE
          props:
            algorithm-expression: ds_${Math.abs(uid.hashCode() % 2)}

        # для типов кошельков
        wallet_types_inline:
          type: INLINE
          props:
            algorithm-expression: ds_${Math.abs(uid.hashCode() % 2)}